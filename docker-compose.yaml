services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage. Depending on the hardware you run this Compose on, you may be able
  # to reduce the interval and timeout in the healthcheck to speed up your `docker-compose up` times.
  dagster_postgres:
    image: postgres:11
    container_name: postgres
    environment:
      POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    networks:
      - dagster_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DAGSTER_POSTGRES_USER} -d ${DAGSTER_POSTGRES_DB}']
      interval: 10s
      timeout: 8s
      retries: 5

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  dagster_pipeline:
    build:
      context: .
      dockerfile: ./pipeline.Dockerfile
    container_name: pipeline
    image: dagster_pipeline
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DUCKDB_PATH: ${DUCKDB_PATH}
      DBT_PROJECT_DIR: ${DBT_PROJECT_DIR}
      DBT_MANIFEST_PATH: ${DBT_MANIFEST_PATH}
      TIMEZONE: ${TIMEZONE}
      DAGSTER_DBT_PARSE_PROJECT_ON_LOAD: ${DAGSTER_DBT_PARSE_PROJECT_ON_LOAD}
      DAGSTER_CURRENT_IMAGE: dagster_pipeline
    networks:
      - dagster_network
    volumes:
      - /Users/albperez/Projects/news-ph/duckdb_data:/opt/dagster/data


  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./dagster.Dockerfile
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    environment:
      DAGSTER_POSTGRES_USER:  ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD:  ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB:  ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - /Users/albperez/Projects/news-ph/duckdb_data:/opt/dagster/data
    networks:
      - dagster_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dagster_pipeline:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./dagster.Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DUCKDB_PATH: ${DUCKDB_PATH}
      DBT_PROJECT_DIR: ${DBT_PROJECT_DIR}
      DBT_MANIFEST_PATH: ${DBT_MANIFEST_PATH}
      TIMEZONE: ${TIMEZONE}
      DAGSTER_DBT_PARSE_PROJECT_ON_LOAD: ${DAGSTER_DBT_PARSE_PROJECT_ON_LOAD}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - /Users/albperez/Projects/news-ph/duckdb_data:/opt/dagster/data
    networks:
      - dagster_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dagster_pipeline:
        condition: service_started

networks:
  dagster_network:
    driver: bridge
    name: network
    